---
interface Props {
  projectId?: string;
  withoutImage?: boolean;
}

const { projectId } = Astro.props;

import { projects } from "../data/project";

const project = projects.find((img) => img.id === projectId);

if (!project) {
  throw new Error(`Image with id "${projectId}" not found`);
}
---

<div class="modal__overlay" transition:name="overlay">
  <div class="modal__card" transition:name={`wrapper-${projectId}`}>
    <div class="modal__image-container">
      <img
        class="modal__image"
        src={project.src}
        alt={project.id}
        transition:name={`image-${projectId}`}
      />
    </div>
    <div class="modal__content">
      <div class="title-wrapper">
        <h3 class="modal__content-title">{project.title}</h3>
      </div>

      <div class="description-wrapper">
        <p class="modal__content-description">{project.description}</p>

        <div class="meta-wrapper">
          <div class="modal__content-stack">
            {
              project.stack.map((stack) => {
                return (
                  <small
                    class="tech-stack"
                    style={`background-color: ${stack.color}`}
                  >
                    {stack.name}
                  </small>
                );
              })
            }
          </div>

          <ul class="project__links">
            <li>
              <a
                href="https://example.com/live"
                target="_blank"
                class="project__links-live"
              >
                live
              </a>
            </li>

            <li>
              <a
                href="https://example.com/repo"
                target="_blank"
                class="project__links-github"
              >
                repo
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- </div> -->

<style>
  .title-wrapper {
    padding: 2rem 2rem 1rem 2rem;
    /* background: red; */
    border-bottom: 1px solid rgba(0, 0, 0, 0.138);
  }

  .description-wrapper {
    padding: 1rem 2rem 2rem 2rem;
    overflow-y: auto;
    flex-grow: 1;
  }
  .modal__card {
    display: flex;
    width: 900px;
    height: 560px;
    max-width: 95vw;
    max-height: 90vh;
    background-color: white;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  }

  .modal__overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(26, 32, 44, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    inset: 0;
  }

  .modal__overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 1rem;
  }

  .modal__card {
    display: flex;
    width: 1120px;
    height: 600px;
    max-width: 90vw;
    max-height: 80vh;
    background-color: white;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  }

  .modal__image-container {
    flex-basis: 60%;
    height: 100%;
  }

  .modal__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 1rem;
  }

  .modal__content {
    flex-basis: 40%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    background-color: #fafafa;
    color: #222;
  }

  .modal__content-title {
    font-size: 1.5rem;
    font-weight: bold;
  }

  .modal__content-description {
    font-size: 1rem;
    line-height: 1.6;
    color: #555;
  }

  /* .modal__close {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background: none;
    border: none;
    font-size: 1rem;
    cursor: pointer;
    color: #333;
  }  */

  /* @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  ::view-transition-new(overlay) {
    animation: fade-in 300ms ease-out;
  }
  ::view-transition-old(overlay) {
    display: none;
  } */
</style>

<!-- <script>
  import { navigate } from "astro:transitions/client";

  document.addEventListener("DOMContentLoaded", async () => {
    const closeButton = document.querySelector(".modal__close");
    const overlay = document.querySelector(".modal__overlay");
    if (closeButton) {
      closeButton.addEventListener("click", (e) => {
        e.preventDefault();
        navigate("/home/projects");
      });
    }
    if (overlay) {
      overlay.addEventListener("click", (e) => {
        if (e.target === overlay) {
          e.preventDefault();
          navigate("/home/projects");
        }
      });
    }
  });
</script> -->

<!-- <script>
  import { navigate } from "astro:transitions/client";

  document.addEventListener("DOMContentLoaded", () => {
    console.log("Modal script initialized");
    const closeButton = document.querySelector(".modal__close");
    const overlay = document.querySelector(".modal__overlay");

    if (!closeButton || !overlay) {
      console.error("Modal elements missing:", { closeButton, overlay });
      return;
    }

    closeButton.addEventListener("click", (e) => {
      e.preventDefault();
      console.log("Modal close button clicked");
      navigate("/home/projects").catch((err) =>
        console.error("Modal navigation error:", err)
      );
    });

    overlay.addEventListener("click", (e) => {
      if (e.target === overlay) {
        e.preventDefault();
        console.log("Modal overlay clicked");
        navigate("/home/projects").catch((err) =>
          console.error("Modal navigation error:", err)
        );
      }
    });
  });
</script> -->
