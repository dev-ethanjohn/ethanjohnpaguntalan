---
import Aside from "../../components/Aside.astro";
import Header from "../../components/Header.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import ProjectsTab from "../../components/main/ProjectsTab.astro";
import ArtsTab from "../../components/main/ArtsTab.astro";
import BlogsTab from "../../components/main/BlogsTab.astro";
import Blurb from "../../components/Blurb.astro";

import "../../styles/global.css";
import "../../styles/utils.css";

// data imports
import { user } from "../../data/user";

export const tabs = ["projects", "blogs", "arts"];
export async function getStaticPaths() {
  return tabs.map((tab) => ({
    params: { tab },
  }));
}

const capitalize = (str: string): string =>
  str.charAt(0).toUpperCase() + str.slice(1);

const { tab } = Astro.params;
---

<MainLayout title="Home">
  <div class="dropBar">
    <div class="dropBar__profile">
      <img src="" alt="" />
      <h1>{user.username}</h1>
    </div>
  </div>
  <div class="grid">
    <Header {...user} />

    <nav class="main-nav">
      <div class="tabs main-nav__left" id="tab-container">
        {
          tabs.map((t) => (
            <button
              data-tab={t}
              class={tab === t ? "active" : ""}
              aria-selected={tab === t}
              role="tab"
            >
              {capitalize(t)}
            </button>
          ))
        }
        <div class="tab-underline" id="tab-underline"></div>
      </div>

      <section class="main-nav__right">
        <Blurb />
      </section>
    </nav>
  </div>

  <div class="main-grid">
    <main class="layout__main" transition:persist>
      <div id="tab-content" class="tab-content">
        <div
          id="projects-content"
          class="tab-pane"
          style={tab === "projects" ? "display: block;" : "display: none;"}
        >
          <ProjectsTab />
        </div>
        <div
          id="blogs-content"
          class="tab-pane"
          style={tab === "blogs" ? "display: block;" : "display: none;"}
        >
          <BlogsTab />
        </div>
        <div
          id="arts-content"
          class="tab-pane"
          style={tab === "arts" ? "display: block;" : "display: none;"}
        >
          <ArtsTab />
        </div>
      </div>
    </main>
    <Aside />
  </div>
</MainLayout>

<style>
  .dropBar {
    padding: 2rem;
    background-color: rgba(0, 0, 0, 0.66);
    backdrop-filter: blur(24px);
    position: fixed;
    top: 0;
    z-index: 15;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    width: clamp(47.125rem, 88vw, 77.5rem);
    left: 50%;

    opacity: 0;
    visibility: hidden;
    transform: translateX(-50%) translateY(-100%);
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
  }

  .dropBar.bar-active {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
  }

  .grid {
    display: grid;
    grid-template-columns: 1fr 357px;
    grid-template-rows: auto;
    grid-template-areas:
      "header header"
      "main-nav main-nav";
    gap: 1rem;
    width: clamp(47.125rem, 88vw, 77.5rem);
    margin: 1rem auto;
  }

  .main-grid {
    position: relative;
    display: grid;
    justify-content: center;
    grid-template-columns: 1fr 357px;
    width: clamp(47.125rem, 88vw, 77.5rem);
    grid-template-areas: "main aside";
    margin: 1rem auto;
  }

  .main-nav {
    grid-area: main-nav;
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .main-nav__left {
    flex: 2;
    display: flex;
    gap: 1rem;
  }

  .main-nav__right {
    flex: 1;
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }

  .layout__main {
    grid-area: main;
    margin-right: 3rem;
  }

  .tabs {
    position: relative;
    display: flex;
    gap: 3rem;
  }

  .tabs button {
    position: relative;
    background: none;
    border: none;
    font-size: 1rem;
    cursor: pointer;
    color: #999999;
  }

  .tabs button.active,
  .tabs button:hover {
    color: white;
  }

  .tab-underline {
    position: absolute;
    bottom: 0;
    height: 2px;
    background: white;
    transition: all 0.3s ease;
    width: 0;
    left: 0;
  }
</style>

<script is:inline data-astro-rerun>
  // NOTE: control aside sticky positioning before and after page change/transitions
  // persist scroll position
  document.addEventListener("astro:before-swap", () => {
    sessionStorage.setItem("scrollPosition", window.scrollY.toString());
    const asideInner = document.querySelector(".profile__templates");
    if (asideInner) {
      const isSticky = getComputedStyle(asideInner).position === "fixed";
      sessionStorage.setItem("wasSticky", isSticky ? "true" : "false");
    }
  });

  document.addEventListener("astro:after-swap", () => {
    const scrollPosition = sessionStorage.getItem("scrollPosition");
    const wasSticky = sessionStorage.getItem("wasSticky") === "true";

    if (scrollPosition) {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          if (wasSticky) {
            const asideInner = document.querySelector(".profile__templates");
            const aside = document.querySelector(".aside");
            if (asideInner && aside) {
              asideInner.style.transition = "none";
              asideInner.style.position = "fixed";
              asideInner.style.top = "0";
              asideInner.style.width = getComputedStyle(aside).width;
              asideInner.style.transform = "translateY(7rem)";
            }
          }

          window.scrollTo({
            top: parseInt(scrollPosition, 10),
            behavior: "instant",
          });

          sessionStorage.removeItem("scrollPosition");
          sessionStorage.removeItem("wasSticky");
          sessionStorage.removeItem("wasDropBarActive");
        });
      });
    }
  });

  document.addEventListener("astro:page-load", () => {
    const tabButtons = document.querySelectorAll("[data-tab]");
    const tabPanes = document.querySelectorAll(".tab-pane");
    const underline = document.getElementById("tab-underline");
    const nav = document.querySelector(".main-nav");
    const dropBar = document.querySelector(".dropBar");

    // e.g. if url is [...home/projects/project-1], remove dropBar
    const isProjectPage = window.location.pathname.match(
      /^\/home\/projects\/[^/]+$/
    );
    if (isProjectPage && dropBar) {
      dropBar.classList.remove("bar-active");
      dropBar.style.transform = "translateX(-50%) translateY(-100%)";
    }

    function moveUnderlineToActiveTab(tabId) {
      const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
      if (!activeButton || !underline) return;

      const { offsetLeft, offsetWidth } = activeButton;
      underline.style.width = `${offsetWidth}px`;
      underline.style.left = `${offsetLeft}px`;
    }

    function showTab(tabId) {
      tabButtons.forEach((btn) => {
        btn.classList.toggle("active", btn.dataset.tab === tabId);
      });

      tabPanes.forEach((pane) => {
        pane.style.display = pane.id === `${tabId}-content` ? "block" : "none";
      });

      moveUnderlineToActiveTab(tabId);
    }

    // change current URL using history to match tab data (client)
    // e.g., /home/projects, /home/blogs, and more
    tabButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const tab = button.dataset.tab;
        history.pushState(null, null, `/home/${tab}`);
        showTab(tab);
      });
    });

    function getCurrentTabFromPath() {
      const path = window.location.pathname;
      const match = path.match(/\/home\/(projects|blogs|arts)/);
      return match ? match[1] : "projects";
    }

    const initialTab = getCurrentTabFromPath(); // defaults to "projects", unless path not matched
    showTab(initialTab);

    window.addEventListener("popstate", () => {
      const tab = getCurrentTabFromPath();
      showTab(tab);
    });

    window.addEventListener("resize", () => {
      const tab = getCurrentTabFromPath();
      moveUnderlineToActiveTab(tab);
    });

    // NOTE: Handle asdide positioning on 1st load
    //
    const options = {
      root: document,
      rootMargin: "32px",
      threshold: 0,
    };

    const asideInner = document.querySelector(".profile__templates");
    const aside = document.querySelector(".aside");

    if (asideInner && aside && !isProjectPage) {
      const callback = (entries) => {
        const entry = entries[0];

        const moveDown = () => {
          const asideWidth = getComputedStyle(aside).width; //? ensures inner width matches parent width when out of doc flow (due to fixed postioning)
          asideInner.style.transition = "transform 0.3s ease";
          asideInner.style.transform = "translateY(7rem)";
          asideInner.style.position = "fixed";
          asideInner.style.top = "0";
          asideInner.style.width = asideWidth;
        };

        const moveUp = () => {
          asideInner.style.transition = "transform 0.5s ease";
          asideInner.style.transform = "translateY(0rem)";
          asideInner.style.position = "static";
          asideInner.style.top = "";
          asideInner.style.width = "";
        };

        if (entry.isIntersecting) {
          dropBar?.classList.remove("bar-active");
          moveUp();
        } else {
          dropBar?.classList.add("bar-active");
          moveDown();
        }
      };

      const obs = new IntersectionObserver(callback, options);
      obs.observe(nav);
    }

    function toggleSticky() {
      if (!aside) return;
      aside.classList.remove("sticky-top", "sticky-bottom");
      if (aside.offsetHeight >= window.innerHeight) {
        aside.classList.add("sticky-bottom");
      } else {
        aside.classList.add("sticky-top");
      }
    }

    window.addEventListener("load", toggleSticky);
    window.addEventListener("resize", toggleSticky);
    toggleSticky();
  });
</script>
