---
import Aside from "../../components/Aside.astro";
import Header from "../../components/Header.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import ProjectsTab from "../../components/main/ProjectsTab.astro";
import ArtsTab from "../../components/main/ArtsTab.astro";
import BlogsTab from "../../components/main/BlogsTab.astro";

import "../../styles/global.css";
import "../../styles/utils.css";

export const tabs = ["projects", "blogs", "arts"];
export async function getStaticPaths() {
  return tabs.map((tab) => ({
    params: { tab },
  }));
}

const capitalize = (str: string): string =>
  str.charAt(0).toUpperCase() + str.slice(1);

const { tab } = Astro.params;
---

<MainLayout>
  <div class="grid">
    <Header />

    <nav class="main-nav">
      <div class="tabs main-nav__left" id="tab-container">
        {
          tabs.map((t) => (
            <button
              data-tab={t}
              class={tab === t ? "active" : ""}
              aria-selected={tab === t}
              role="tab"
            >
              {capitalize(t)}
            </button>
          ))
        }
        <div class="tab-underline" id="tab-underline"></div>
      </div>

      <section class="blurb main-nav__right">
        <div class="blurb__cta">
          <button class="button button--primary">Contact</button>
          <button class="button button--secondary">Resume</button>

          <a href="#" class="button__icon">
            <svg
              class="button__icon-github"
              xmlns="http://www.w3.org/2000/svg"
              class="ionicon"
              viewBox="0 0 512 512"
            >
              <path
                fill="currentColor"
                d="M256 32C132.3 32 32 134.9 32 261.7c0 101.5 64.2 187.5 153.2 217.9a17.56 17.56 0 003.8.4c8.3 0 11.5-6.1 11.5-11.4 0-5.5-.2-19.9-.3-39.1a102.4 102.4 0 01-22.6 2.7c-43.1 0-52.9-33.5-52.9-33.5-10.2-26.5-24.9-33.6-24.9-33.6-19.5-13.7-.1-14.1 1.4-14.1h.1c22.5 2 34.3 23.8 34.3 23.8 11.2 19.6 26.2 25.1 39.6 25.1a63 63 0 0025.6-6c2-14.8 7.8-24.9 14.2-30.7-49.7-5.8-102-25.5-102-113.5 0-25.1 8.7-45.6 23-61.6-2.3-5.8-10-29.2 2.2-60.8a18.64 18.64 0 015-.5c8.1 0 26.4 3.1 56.6 24.1a208.21 208.21 0 01112.2 0c30.2-21 48.5-24.1 56.6-24.1a18.64 18.64 0 015 .5c12.2 31.6 4.5 55 2.2 60.8 14.3 16.1 23 36.6 23 61.6 0 88.2-52.4 107.6-102.3 113.3 8 7.1 15.2 21.1 15.2 42.5 0 30.7-.3 55.5-.3 63 0 5.4 3.1 11.5 11.4 11.5a19.35 19.35 0 004-.4C415.9 449.2 480 363.1 480 261.7 480 134.9 379.7 32 256 32z"
              ></path>
            </svg>
          </a>
        </div>
      </section>
    </nav>

    <main class="layout__main">
      <div id="tab-content" class="tab-content">
        <div id="projects-content" class="tab-pane" style="display: none;">
          <ProjectsTab />
        </div>
        <div id="blogs-content" class="tab-pane" style="display: none;">
          <BlogsTab />
        </div>
        <div id="arts-content" class="tab-pane" style="display: none;">
          <ArtsTab />
        </div>
      </div>
    </main>

    <Aside />
  </div>
</MainLayout>

<style>
  .grid {
    display: grid;
    grid-template-columns: 1fr 357px;
    grid-template-rows: auto auto auto;
    grid-template-areas:
      "header header"
      "main-nav main-nav"
      "main aside";
    gap: 1rem;
    width: clamp(47.125rem, 88vw, 77.5rem);
    margin: 1rem auto;
  }

  .main-nav {
    grid-area: main-nav;
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .main-nav__left {
    flex: 2;
    display: flex;
    gap: 1rem;
  }

  .main-nav__right {
    flex: 1;
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }

  .layout__main {
    grid-area: main;
  }

  /* NOTE: BUTTON */
  .button {
    text-align: center;
    border-radius: 0.5rem;
    width: 100%;
  }

  .button--primary {
    background-color: #303030;
    border: 0.5px solid #ffffff3b;
  }

  .button--secondary {
    background-color: #303030;
    border: 0.5px solid #ffffff3b;
  }

  .button__icon {
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    background-color: #303030;
    border: 0.5px solid #ffffff3b;
    border-radius: 0.5rem;
    width: 2.25rem;
    flex-shrink: 0;
  }

  .button__icon-link,
  .button__icon-github {
    height: 1.5rem;
    width: 1.5rem;
  }

  /* BLURB */
  .blurb {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .blurb__bio {
    display: grid;
    gap: 0.75rem;
  }

  .blurb__title--primary {
    font-size: 1.5rem;
    font-weight: bold;
  }

  .blurb__bio-description {
    letter-spacing: 0.05em;
  }

  .hero__blurb-name {
    /* font-family: var(--ff-sans-archivo-black); */
    font-size: 2.5rem;
  }

  .hero__blurb-bio {
    font-size: 1rem;
    font-weight: 500;
  }

  .blurb__cta {
    display: flex;
    gap: 0.75rem;
    width: 100%;
    height: 2.25rem;
    font-weight: 600;
  }

  .tabs {
    position: relative;
    display: flex;
    gap: 3rem;
  }

  .tabs button {
    position: relative;
    background: none;
    border: none;
    font-size: 1rem;
    cursor: pointer;
    color: #999999;
  }

  .tabs button.active,
  .tabs button:hover {
    color: white;
  }

  .tab-underline {
    position: absolute;
    bottom: 0;
    height: 2px;
    background: white;
    transition: all 0.3s ease;
    width: 0;
    left: 0;
  }
</style>

<script type="module">
  document.addEventListener("DOMContentLoaded", () => {
    const tabButtons = document.querySelectorAll("[data-tab]");
    const tabPanes = document.querySelectorAll(".tab-pane");
    const underline = document.getElementById("tab-underline");

    function moveUnderlineToActiveTab(tabId) {
      const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
      if (!activeButton || !underline) return;

      const { offsetLeft, offsetWidth } = activeButton;
      underline.style.width = `${offsetWidth}px`;
      underline.style.left = `${offsetLeft}px`;
    }

    function showTab(tabId) {
      tabButtons.forEach((btn) => {
        btn.classList.toggle("active", btn.dataset.tab === tabId);
      });

      tabPanes.forEach((pane) => {
        pane.style.display = pane.id === `${tabId}-content` ? "block" : "none";
      });

      moveUnderlineToActiveTab(tabId);
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const tab = button.dataset.tab;
        history.pushState(null, null, `/home/${tab}`);
        showTab(tab);
      });
    });

    function getCurrentTabFromPath() {
      const path = window.location.pathname;
      const match = path.match(/\/home\/(projects|blogs|arts)/);
      return match ? match[1] : "projects";
    }

    const initialTab = getCurrentTabFromPath();
    showTab(initialTab);

    window.addEventListener("popstate", () => {
      const tab = getCurrentTabFromPath();
      showTab(tab);
    });

    window.addEventListener("resize", () => {
      const tab = getCurrentTabFromPath();
      moveUnderlineToActiveTab(tab);
    });
  });
</script>
