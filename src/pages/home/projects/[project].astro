---
import Aside from "../../../components/Aside.astro";
import Header from "../../../components/Header.astro";
import MainLayout from "../../../layouts/MainLayout.astro";
import ProjectsTab from "../../../components/main/ProjectsTab.astro";
import ArtsTab from "../../../components/main/ArtsTab.astro";
import BlogsTab from "../../../components/main/BlogsTab.astro";
import Blurb from "../../../components/Blurb.astro";
import Modal from "../../../components/Modal.astro";
import { projects } from "../../../data/project";
import "../../../styles/global.css";
import "../../../styles/utils.css";

export async function getStaticPaths() {
  return projects.map((project) => ({
    params: { project: project.id },
    props: { project },
  }));
}

const { project } = Astro.props;

const projectData = projects.find((p) => p.id === project.id);

if (!projectData) {
  return Astro.redirect("/404");
}

const tabs = ["projects", "blogs", "arts"];
const activeTab = "projects";
const capitalize = (str: string): string =>
  str.charAt(0).toUpperCase() + str.slice(1);
---

<MainLayout title={`Project: ${projectData.title}`} projectId={project.id}>
  <div class="dropBar">Hello</div>
  <div class="grid" transition:animate="fade">
    <Header />

    <nav class="main-nav">
      <div class="tabs main-nav__left" id="tab-container">
        {
          tabs.map((t) => (
            <button
              data-tab={t}
              class={activeTab === t ? "active" : ""}
              aria-selected={activeTab === t}
              role="tab"
            >
              {capitalize(t)}
            </button>
          ))
        }
        <div class="tab-underline" id="tab-underline"></div>
      </div>

      <section class="main-nav__right">
        <Blurb />
      </section>
    </nav>

    <main class="layout__main" transition:name="main-content">
      <div id="tab-content" class="tab-content">
        <div id="projects-content" class="tab-pane" style="display: block;">
          <ProjectsTab withoutImage={true} projectId={project.id} />
        </div>
        <div id="blogs-content" class="tab-pane" style="display: none;">
          <BlogsTab />
        </div>
        <div id="arts-content" class="tab-pane" style="display: none;">
          <ArtsTab />
        </div>
      </div>
    </main>

    <Aside />

    <Modal projectId={project.id} withoutImage={true} />
  </div>
</MainLayout>

<style>
  .dropBar {
    padding: 2rem;
    width: 100%;
    background-color: black;
    position: fixed;
    top: 0;
    z-index: 15;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    visibility: hidden;
    transform: translate3d(0, -100%, 0);
    transition:
      transform 0.3s,
      visibility 0.3s;
  }

  .dropBar.bar-active {
    transform: translateZ(0);
    visibility: visible;
  }
  .grid {
    display: grid;
    grid-template-columns: 1fr 357px;
    grid-template-rows: auto auto auto;
    grid-template-areas:
      "header header"
      "main-nav main-nav"
      "main aside";
    gap: 1rem;
    width: clamp(47.125rem, 88vw, 77.5rem);
    margin: 1rem auto;
  }

  .main-nav {
    grid-area: main-nav;
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .main-nav__left {
    flex: 2;
    display: flex;
    gap: 1rem;
  }

  .main-nav__right {
    flex: 1;
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }

  .layout__main {
    grid-area: main;
    position: relative;
    margin-right: 3rem;
  }

  .tabs {
    position: relative;
    display: flex;
    gap: 3rem;
  }

  .tabs button {
    position: relative;
    background: none;
    border: none;
    font-size: 1rem;
    cursor: pointer;
    color: #999999;
  }

  .tabs button.active,
  .tabs button:hover {
    color: white;
  }

  .tab-underline {
    position: absolute;
    bottom: 0;
    height: 2px;
    background: white;
    transition: all 0.3s ease;
    width: 0;
    left: 0;
  }
</style>

<script is:inline data-astro-rerun>
  document.addEventListener("astro:page-load", () => {
    const tabButtons = document.querySelectorAll("[data-tab]");
    const tabPanes = document.querySelectorAll(".tab-pane");
    const underline = document.getElementById("tab-underline");
    const nav = document.querySelector(".main-nav");
    const dropBar = document.querySelector(".dropBar");

    function moveUnderlineToActiveTab(tabId) {
      const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
      if (!activeButton || !underline) return;

      const { offsetLeft, offsetWidth } = activeButton;
      underline.style.width = `${offsetWidth}px`;
      underline.style.left = `${offsetLeft}px`;
    }

    function showTab(tabId) {
      tabButtons.forEach((btn) => {
        btn.classList.toggle("active", btn.dataset.tab === tabId);
        btn.setAttribute("aria-selected", btn.dataset.tab === tabId);
      });

      tabPanes.forEach((pane) => {
        pane.style.display = pane.id === `${tabId}-content` ? "block" : "none";
      });

      moveUnderlineToActiveTab(tabId);
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const tab = button.dataset.tab;
        history.pushState(null, null, `/home/${tab}`);
        showTab(tab);
      });
    });

    showTab("projects");

    window.addEventListener("popstate", () => {
      showTab("projects");
    });

    window.addEventListener("resize", () => {
      moveUnderlineToActiveTab("projects");
    });

    //NOTE: sticky nav
    const options = {
      root: document,
      rootMargin: "32px",
      threshold: 0,
    };

    const callback = (entries) => {
      const entry = entries[0];
      if (entry.isIntersecting) {
        console.log("entering");
        dropBar.classList.remove("bar-active");
      } else {
        console.log("leaving");
        dropBar.classList.add("bar-active");
      }
    };
    const obs = new IntersectionObserver(callback, options);
    obs.observe(nav);
  });
</script>
