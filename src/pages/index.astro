---
import Aside from "../components/Aside.astro";
import Header from "../components/Header.astro";
import MainLayout from "../layouts/MainLayout.astro";
import ProjectsTab from "../components/main/ProjectsTab.astro";
import ArtsTab from "../components/main/ArtsTab.astro";
import BlogsTab from "../components/main/BlogsTab.astro";
import Blurb from "../components/Blurb.astro";
import DropBar from "../components/DropBar.astro";
import Stack from "../components/main/Stack.astro";
import Divider from "../components/Divider.astro";

import "../styles/global.css";
import "../styles/utils.css";

import { user } from "../data/user";

const tabs = ["projects", "blogs", "arts", "stack"];
const initialTab = "projects"; // Default tab
---

<MainLayout title="Home">
  <DropBar {...user} />
  <div class="grid">
    <Header {...user} />
    <Divider />

    <nav class="main-nav">
      <div class="tabs main-nav__left" id="tab-container">
        {
          tabs.map((t) => (
            <button
              data-tab={t}
              class={initialTab === t ? "active" : ""}
              aria-selected={initialTab === t}
              role="tab"
            >
              {t.charAt(0).toUpperCase() + t.slice(1)}
            </button>
          ))
        }
        <div class="tab-underline" id="tab-underline"></div>
      </div>

      <section class="main-nav__right">
        <Blurb />
      </section>
    </nav>
  </div>

  <div class="main-grid">
    <main class="layout__main" transition:persist>
      <div id="tab-content" class="tab-content">
        <div id="projects-content" class="tab-pane" style="display: block;">
          <ProjectsTab />
        </div>
        <div id="blogs-content" class="tab-pane" style="display: none;">
          <BlogsTab />
        </div>
        <div id="stack-content" class="tab-pane" style="display: none;">
          <Stack />
        </div>
        <div id="arts-content" class="tab-pane" style="display: none;">
          <ArtsTab />
        </div>
      </div>
    </main>
    <Aside />
  </div>

  <section class="mobile-content">
    <Aside />
    <ProjectsTab />
    <Stack />
    <BlogsTab />
    <ArtsTab />
  </section>
</MainLayout>

<style>
  .grid {
    display: grid;
    grid-template-columns: 1fr 357px;
    grid-template-areas:
      "header header"
      "main-nav main-nav";
    gap: 1rem;
    width: clamp(47.125rem, 88vw, 75.5rem);
    margin: 1rem auto;
  }

  .main-grid {
    position: relative;
    display: grid;
    grid-template-columns: 1fr 357px;
    grid-template-areas: "main aside";
    width: clamp(47.125rem, 88vw, 75.5rem);
    margin: 1rem auto;
  }

  .main-nav {
    grid-area: main-nav;
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .main-nav__left {
    flex: 2;
    display: flex;
    gap: 1rem;
  }

  .main-nav__right {
    flex: 1;
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }

  .layout__main {
    grid-area: main;
    margin-right: clamp(1rem, 4vw + 0.125rem, 5rem);
  }

  .tabs {
    position: relative;
    display: flex;
    gap: 3rem;
  }

  .tabs button {
    position: relative;
    background: none;
    border: none;
    font-size: 1rem;
    cursor: pointer;
    color: #999999;
  }

  .tabs button.active,
  .tabs button:hover {
    color: white;
  }

  .tab-underline {
    position: absolute;
    bottom: 0;
    height: 2px;
    background: white;
    transition: all 0.3s ease;
    width: 0;
    left: 0;
  }

  .mobile-content {
    display: none;
  }

  @media (max-width: 800px) {
    .grid {
      display: block;
      width: 393px;
    }
    .main-nav {
      display: none;
    }
    .main-grid {
      display: none;
    }

    .mobile-content {
      display: block;
      width: 393px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      padding: 0 1rem;
      margin-bottom: 4rem;
    }
  }
</style>

<script is:inline data-astro-rerun>
  document.addEventListener("astro:before-swap", () => {
    sessionStorage.setItem("scrollPosition", window.scrollY.toString());
  });

  document.addEventListener("astro:after-swap", () => {
    const scrollPosition = sessionStorage.getItem("scrollPosition");

    if (scrollPosition) {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          window.scrollTo({
            top: parseInt(scrollPosition, 10),
            behavior: "instant",
          });

          sessionStorage.removeItem("scrollPosition");
          sessionStorage.removeItem("wasDropBarActive");
        });
      });
    }
  });

  document.addEventListener("astro:page-load", () => {
    const tabButtons = document.querySelectorAll("[data-tab]");
    const tabPanes = document.querySelectorAll(".tab-pane");
    const underline = document.getElementById("tab-underline");
    const nav = document.querySelector(".main-nav");
    const dropBar = document.querySelector(".dropBar");

    function moveUnderlineToActiveTab(tabId) {
      const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
      if (!activeButton || !underline) return;

      const { offsetLeft, offsetWidth } = activeButton;
      underline.style.width = `${offsetWidth}px`;
      underline.style.left = `${offsetLeft}px`;
    }

    function showTab(tabId) {
      tabButtons.forEach((btn) => {
        btn.classList.toggle("active", btn.dataset.tab === tabId);
        btn.setAttribute(
          "aria-selected",
          btn.dataset.tab === tabId ? "true" : "false"
        );
      });

      tabPanes.forEach((pane) => {
        pane.style.display = pane.id === `${tabId}-content` ? "block" : "none";
      });

      moveUnderlineToActiveTab(tabId);
    }

    // Set initial tab
    showTab("projects");

    tabButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const tab = button.dataset.tab;
        showTab(tab); // No URL change, just switch content
      });
    });

    window.addEventListener("popstate", () => {
      // No URL change, so no tab update needed from popstate
    });

    window.addEventListener("resize", () => {
      const activeTab = document.querySelector(".tabs .active");
      if (activeTab) moveUnderlineToActiveTab(activeTab.dataset.tab);
    });

    if (dropBar && nav) {
      const options = {
        root: null,
        rootMargin: "32px",
        threshold: 0,
      };

      const asideInner = document.querySelector(".profile__templates");
      const aside = document.querySelector(".aside");

      if (asideInner && aside) {
        const callback = (entries) => {
          const entry = entries[0];

          if (entry.isIntersecting) {
            dropBar.classList.remove("bar-active");
          } else {
            dropBar.classList.add("bar-active");
          }
        };

        const obs = new IntersectionObserver(callback, options);
        obs.observe(nav);
      }
    }
  });
</script>
